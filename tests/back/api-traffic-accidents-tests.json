{
	"info": {
		"_postman_id": "b549bb09-c31c-47d4-afd7-0b504774153b",
		"name": "API Traffic-Accidents",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42526065"
	},
	"item": [
		{
			"name": "GET /traffic-accidents/loadInitialData",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado válido (201 o 400)\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r",
							"});\r",
							"\r",
							"pm.test(\"El cuerpo de respuesta es un objeto JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    pm.expect(() => pm.response.json()).not.to.throw();\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents/loadInitialData",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents",
						"loadInitialData"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /traffic-accidents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta es un array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents/",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Filtrado Comunidad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Comprobación de estado\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Comprobación de que la respuesta es un array\r",
							"pm.test(\"Respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  Comprobación dinámica del filtro\r",
							"const queryParams = pm.request.url.query.toObject();\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"Object.entries(queryParams).forEach(([key, value]) => {\r",
							"    // Saltamos limit y offset porque no son datos del recurso\r",
							"    if ([\"limit\", \"offset\", \"from\", \"to\"].includes(key)) return;\r",
							"\r",
							"    const expected = isNaN(value) ? value : Number(value);\r",
							"\r",
							"    pm.test(`Todos los elementos tienen ${key} igual a ${expected}`, () => {\r",
							"        jsonData.forEach(item => {\r",
							"            pm.expect(item[key]).to.eql(expected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?autonomous_community=Galicia",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "autonomous_community",
							"value": "Galicia"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Filtrado Año",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Comprobación de estado\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Comprobación de que la respuesta es un array\r",
							"pm.test(\"Respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  Comprobación dinámica del filtro\r",
							"const queryParams = pm.request.url.query.toObject();\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"Object.entries(queryParams).forEach(([key, value]) => {\r",
							"    // Saltamos limit y offset porque no son datos del recurso\r",
							"    if ([\"limit\", \"offset\", \"from\", \"to\"].includes(key)) return;\r",
							"\r",
							"    const expected = isNaN(value) ? value : Number(value);\r",
							"\r",
							"    pm.test(`Todos los elementos tienen ${key} igual a ${expected} o no hay ninguno`, () => {\r",
							"        jsonData.forEach(item => {\r",
							"            pm.expect(item[key]).to.eql(expected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?year=2070",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "year",
							"value": "2070"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Filtrado fatal_accidents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Comprobación de estado\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Comprobación de que la respuesta es un array\r",
							"pm.test(\"Respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  Comprobación dinámica del filtro\r",
							"const queryParams = pm.request.url.query.toObject();\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"Object.entries(queryParams).forEach(([key, value]) => {\r",
							"    // Saltamos limit y offset porque no son datos del recurso\r",
							"    if ([\"limit\", \"offset\", \"from\", \"to\"].includes(key)) return;\r",
							"\r",
							"    const expected = isNaN(value) ? value : Number(value);\r",
							"\r",
							"    pm.test(`Todos los elementos tienen ${key} igual a ${expected}`, () => {\r",
							"        jsonData.forEach(item => {\r",
							"            pm.expect(item[key]).to.eql(expected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?fatal_accidents=283",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "fatal_accidents",
							"value": "283"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Filtrado deceased",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Comprobación de estado\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Comprobación de que la respuesta es un array\r",
							"pm.test(\"Respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  Comprobación dinámica del filtro\r",
							"const queryParams = pm.request.url.query.toObject();\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"Object.entries(queryParams).forEach(([key, value]) => {\r",
							"    // Saltamos limit y offset porque no son datos del recurso\r",
							"    if ([\"limit\", \"offset\", \"from\", \"to\"].includes(key)) return;\r",
							"\r",
							"    const expected = isNaN(value) ? value : Number(value);\r",
							"\r",
							"    pm.test(`Todos los elementos tienen ${key} igual a ${expected}`, () => {\r",
							"        jsonData.forEach(item => {\r",
							"            pm.expect(item[key]).to.eql(expected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?deceased=310",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "deceased",
							"value": "310"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Filtrado vehicles_without_mot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Comprobación de estado\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Comprobación de que la respuesta es un array\r",
							"pm.test(\"Respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  Comprobación dinámica del filtro\r",
							"const queryParams = pm.request.url.query.toObject();\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"Object.entries(queryParams).forEach(([key, value]) => {\r",
							"    // Saltamos limit y offset porque no son datos del recurso\r",
							"    if ([\"limit\", \"offset\", \"from\", \"to\"].includes(key)) return;\r",
							"\r",
							"    const expected = isNaN(value) ? value : Number(value);\r",
							"\r",
							"    pm.test(`Todos los elementos tienen ${key} igual a ${expected}`, () => {\r",
							"        jsonData.forEach(item => {\r",
							"            pm.expect(item[key]).to.eql(expected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?vehicles_without_mot=33",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "vehicles_without_mot",
							"value": "33"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /traffic-accidents/Andalucía Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Estado 200\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Es un array\r",
							"pm.test(\"Respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// Todos los elementos tienen la comunidad esperada\r",
							"pm.test(\"Todos los elementos devueltos son de Andalucía\", () => {\r",
							"    const data = pm.response.json();\r",
							"    data.forEach(item => {\r",
							"        pm.expect(item.autonomous_community).to.eql(\"Andalucía\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents/Andaluc%C3%ADa",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents",
						"Andaluc%C3%ADa"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Filtrado Año y Comunidad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Comprobación de estado\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Comprobación de que la respuesta es un array\r",
							"pm.test(\"Respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  Comprobación dinámica del filtro\r",
							"const queryParams = pm.request.url.query.toObject();\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"Object.entries(queryParams).forEach(([key, value]) => {\r",
							"    // Saltamos limit y offset porque no son datos del recurso\r",
							"    if ([\"limit\", \"offset\", \"from\", \"to\"].includes(key)) return;\r",
							"\r",
							"    const expected = isNaN(value) ? value : Number(value);\r",
							"\r",
							"    pm.test(`Todos los elementos tienen ${key} igual a ${expected}`, () => {\r",
							"        jsonData.forEach(item => {\r",
							"            pm.expect(item[key]).to.eql(expected);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?autonomous_community=Galicia&year=2023",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "autonomous_community",
							"value": "Galicia"
						},
						{
							"key": "year",
							"value": "2023"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Rango Años",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Comprobación de estado\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Comprobación de que la respuesta es un array\r",
							"pm.test(\"Respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?from=2020&to=2024",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "from",
							"value": "2020"
						},
						{
							"key": "to",
							"value": "2024"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Sin resultados",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"La respuesta es un array\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?year=2001",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "year",
							"value": "2001"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Paginación simple",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Código 200\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  La respuesta es un array\r",
							"pm.test(\"La respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  El tamaño del array es como máximo 5\r",
							"pm.test(\"El array tiene máximo 5 elementos\", () => {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.length).to.be.at.most(5);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?limit=5&offset=0",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Paginación Con Filtro",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Código 200\r",
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  La respuesta es un array\r",
							"pm.test(\"La respuesta es un array\", () => {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  El array tiene como máximo 2 elementos (limit)\r",
							"pm.test(\"El array tiene máximo 2 elementos\", () => {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.length).to.be.at.most(2);\r",
							"});\r",
							"\r",
							"//  Todos los resultados tienen la comunidad buscada\r",
							"pm.test(\"Todos los elementos tienen autonomous_community = Cataluña\", () => {\r",
							"    const data = pm.response.json();\r",
							"    data.forEach(item => {\r",
							"        pm.expect(item.autonomous_community).to.eql(\"Cataluña\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents?autonomous_community=Cataluña&limit=2&offset=0",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					],
					"query": [
						{
							"key": "autonomous_community",
							"value": "Cataluña"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CREA PRUEBA (201)CREATED",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código 201 - creado\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"autonomous_community\": \"PRUEBA\",\r\n  \"fatal_accidents\": 100,\r\n  \"deceased\": 120,\r\n  \"vehicles_without_mot\": 20,\r\n  \"year\": 2024\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					]
				}
			},
			"response": []
		},
		{
			"name": "CREA PRUEBA DUPLICADA (409)CONFLICT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código 409 - condlicto\", () => {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Debe incluir mensaje de error\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"autonomous_community\": \"PRUEBA\",\r\n  \"fatal_accidents\": 100,\r\n  \"deceased\": 120,\r\n  \"vehicles_without_mot\": 20,\r\n  \"year\": 2024\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					]
				}
			},
			"response": []
		},
		{
			"name": "Faltan datos (400 Bad Request)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código 400 - Bad Request\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Debe incluir mensaje de error\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"autonomous_community\": \"Madrid\",\r\n    \"fatal_accidents\": 100\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /traffic-accidents (405) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 405\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Debe incluir mensaje de error\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"error\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /traffic-accidents/PRUEBA Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Debe devolver 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Debe devolver un objeto con datos actualizados\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"    pm.expect(jsonData.data).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.data.autonomous_community).to.eql(\"PRUEBA\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"autonomous_community\": \"PRUEBA\",\r\n  \"fatal_accidents\": 100,\r\n  \"deceased\": 700,\r\n  \"vehicles_without_mot\": 20,\r\n  \"year\": 2024\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents/PRUEBA",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents",
						"PRUEBA"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET traffic (404 NOT FOUND)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Debe devolver 404 Not Found\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /traffic-accidents/PRUEBA Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents/PRUEBA",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents",
						"PRUEBA"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /traffic-accidents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/traffic-accidents",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"traffic-accidents"
					]
				}
			},
			"response": []
		}
	]
}